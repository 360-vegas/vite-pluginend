#!/bin/bash

set -e

# GitHub‰ªìÂ∫ì‰ø°ÊÅØ
GITHUB_REPO="https://github.com/360-vegas/vite-pluginend.git"
PROJECT_NAME="vite-pluginend"
INSTALL_DIR="/opt/vite-pluginend"

# È¢úËâ≤ÂÆö‰πâ
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

echo -e "${CYAN}"
cat << 'EOF'
 ____   ____.__  __             __________.__                 .__                        .___
\   \ /   /|__|/  |_  ____     \______   \  |  __ __  ____  |__| ____   ____   ____   __| _/
 \   Y   / |  \   __\/ __ \     |     ___/  | |  |  \/ ___\ |  |/    \_/ __ \ /    \ / __ | 
  \     /  |  ||  | \  ___/     |    |   |  |_|  |  / /_/  >|  |   |  \  ___/|   |  / /_/ | 
   \___/   |__||__|  \___  >    |____|   |____/____/\___  / |__|___|  /\___  >___|  \____ | 
                         \/                        /_____/          \/     \/     \/     \/ 
                                                                                              
         üöÄ ‰∏ÄÈîÆÂÆâË£ÖËÑöÊú¨ - Ëá™Âä®‰ªéGitHub‰∏ãËΩΩÂπ∂ÂÆâË£Ö
EOF
echo -e "${NC}"

echo -e "${BLUE}==================================================================${NC}"
echo -e "${YELLOW}GitHub‰ªìÂ∫ì: $GITHUB_REPO${NC}"
echo -e "${YELLOW}ÂÆâË£ÖÁõÆÂΩï: $INSTALL_DIR${NC}"
echo -e "${BLUE}==================================================================${NC}"

# Ê£ÄÊµãLinuxÂèëË°åÁâà
detect_os() {
    if [ -f /etc/os-release ]; then
        . /etc/os-release
        OS=$NAME
        DISTRO=$ID
        VERSION=$VERSION_ID
    else
        echo -e "${RED}Êó†Ê≥ïÊ£ÄÊµãÊìç‰ΩúÁ≥ªÁªüÁâàÊú¨${NC}"
        exit 1
    fi
    echo -e "${BLUE}Ê£ÄÊµãÂà∞Á≥ªÁªü: $OS $VERSION${NC}"
}

# Ê£ÄÊü•‰æùËµñÊòØÂê¶Â∑≤ÂÆâË£Ö
check_dependency() {
    if command -v $1 &> /dev/null; then
        echo -e "${GREEN}‚úì $1 Â∑≤ÂÆâË£Ö${NC}"
        return 0
    else
        echo -e "${YELLOW}‚ö† $1 Êú™ÂÆâË£Ö${NC}"
        return 1
    fi
}

# Ê£ÄÊü•Âπ∂ÂÆâË£ÖÂü∫Á°Ä‰æùËµñ
install_basic_deps() {
    echo -e "${BLUE}üîß Ê£ÄÊü•Âπ∂ÂÆâË£ÖÂü∫Á°Ä‰æùËµñ...${NC}"
    
    local need_update=false
    
    # Ê£ÄÊü•Git
    if ! check_dependency "git"; then
        need_update=true
        echo -e "${BLUE}ÂÆâË£Ö Git...${NC}"
        case $DISTRO in
            ubuntu|debian)
                if [ "$need_update" = true ]; then
                    sudo apt update
                fi
                sudo apt install -y git
                ;;
            centos|rhel)
                sudo yum install -y git
                ;;
            fedora)
                sudo dnf install -y git
                ;;
            arch)
                sudo pacman -S git --noconfirm
                ;;
            *)
                echo -e "${RED}‰∏çÊîØÊåÅÁöÑÂèëË°åÁâàÔºåËØ∑ÊâãÂä®ÂÆâË£ÖGit${NC}"
                exit 1
                ;;
        esac
    fi
    
    # Ê£ÄÊü•curlÂíåwget
    if ! check_dependency "curl"; then
        echo -e "${BLUE}ÂÆâË£Ö curl...${NC}"
        case $DISTRO in
            ubuntu|debian)
                if [ "$need_update" = true ]; then
                    sudo apt update
                fi
                sudo apt install -y curl
                ;;
            centos|rhel)
                sudo yum install -y curl
                ;;
            fedora)
                sudo dnf install -y curl
                ;;
            arch)
                sudo pacman -S curl --noconfirm
                ;;
        esac
    fi
    
    if ! check_dependency "wget"; then
        echo -e "${BLUE}ÂÆâË£Ö wget...${NC}"
        case $DISTRO in
            ubuntu|debian)
                if [ "$need_update" = true ]; then
                    sudo apt update
                fi
                sudo apt install -y wget
                ;;
            centos|rhel)
                sudo yum install -y wget
                ;;
            fedora)
                sudo dnf install -y wget
                ;;
            arch)
                sudo pacman -S wget --noconfirm
                ;;
        esac
    fi
    
    echo -e "${GREEN}‚úÖ Âü∫Á°Ä‰æùËµñÊ£ÄÊü•ÂÆåÊàê${NC}"
}

# ÂÖãÈöÜÈ°πÁõÆ
clone_project() {
    echo -e "${BLUE}üì• ‰ªéGitHubÂÖãÈöÜÈ°πÁõÆ...${NC}"
    
    # Â¶ÇÊûúÁõÆÊ†áÁõÆÂΩïÂ∑≤Â≠òÂú®ÔºåËØ¢ÈóÆÊòØÂê¶Âà†Èô§
    if [ -d "$INSTALL_DIR" ]; then
        echo -e "${YELLOW}ÁõÆÂΩï $INSTALL_DIR Â∑≤Â≠òÂú®${NC}"
        read -p "ÊòØÂê¶Âà†Èô§Áé∞ÊúâÁõÆÂΩïÂπ∂ÈáçÊñ∞ÂÆâË£Ö? (y/n): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            echo -e "${BLUE}Âà†Èô§Áé∞ÊúâÁõÆÂΩï...${NC}"
            sudo rm -rf "$INSTALL_DIR"
        else
            echo -e "${YELLOW}ÂèñÊ∂àÂÆâË£Ö${NC}"
            exit 0
        fi
    fi
    
    # ÂàõÂª∫ÂÆâË£ÖÁõÆÂΩïÁöÑÁà∂ÁõÆÂΩï
    sudo mkdir -p $(dirname "$INSTALL_DIR")
    
    # ÂÖãÈöÜÈ°πÁõÆ
    echo -e "${BLUE}Ê≠£Âú®ÂÖãÈöÜ‰ªìÂ∫ì...${NC}"
    sudo git clone "$GITHUB_REPO" "$INSTALL_DIR"
    
    # ËÆæÁΩÆÁõÆÂΩïÊùÉÈôê
    sudo chown -R $USER:$USER "$INSTALL_DIR"
    
    echo -e "${GREEN}‚úÖ È°πÁõÆÂÖãÈöÜÂÆåÊàê${NC}"
}

# ÂÆâË£ÖNode.js
install_nodejs() {
    echo -e "${BLUE}üì¶ ÂÆâË£Ö Node.js...${NC}"
    
    # ‰ΩøÁî®NodeSource‰ªìÂ∫ìÂÆâË£ÖÊúÄÊñ∞LTSÁâàÊú¨
    case $DISTRO in
        ubuntu|debian)
            curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
            sudo apt-get install -y nodejs
            ;;
        centos|rhel)
            curl -fsSL https://rpm.nodesource.com/setup_lts.x | sudo bash -
            sudo yum install -y nodejs npm
            ;;
        fedora)
            sudo dnf install -y nodejs npm
            ;;
        arch)
            sudo pacman -S nodejs npm --noconfirm
            ;;
        *)
            echo -e "${RED}‰∏çÊîØÊåÅÁöÑÂèëË°åÁâàÔºåËØ∑ÊâãÂä®ÂÆâË£ÖNode.js${NC}"
            exit 1
            ;;
    esac
    
    # È™åËØÅÂÆâË£Ö
    node_version=$(node --version)
    npm_version=$(npm --version)
    echo -e "${GREEN}‚úì Node.js $node_version ÂÆâË£ÖÊàêÂäü${NC}"
    echo -e "${GREEN}‚úì npm $npm_version ÂÆâË£ÖÊàêÂäü${NC}"
}

# ÂÆâË£ÖGo
install_go() {
    echo -e "${BLUE}üîß ÂÆâË£Ö Go...${NC}"
    
    # Ê£ÄÊü•ÊòØÂê¶Â∑≤ÁªèÂÆâË£Ö‰∫ÜÂêàÈÄÇÁâàÊú¨ÁöÑGo
    if command -v go &> /dev/null; then
        go_version=$(go version | grep -oP 'go\K[0-9]+\.[0-9]+')
        if awk "BEGIN {exit !($go_version >= 1.21)}"; then
            echo -e "${GREEN}‚úì Go $go_version Â∑≤ÂÆâË£Ö‰∏îÁâàÊú¨Á¨¶ÂêàË¶ÅÊ±Ç${NC}"
            return
        fi
    fi
    
    # ‰∏ãËΩΩÊúÄÊñ∞ÁöÑGoÁâàÊú¨
    GO_VERSION="1.21.5"
    ARCH=$(uname -m)
    
    case $ARCH in
        x86_64)
            GO_ARCH="amd64"
            ;;
        aarch64|arm64)
            GO_ARCH="arm64"
            ;;
        *)
            echo -e "${RED}‰∏çÊîØÊåÅÁöÑÊû∂ÊûÑ: $ARCH${NC}"
            exit 1
            ;;
    esac
    
    # ‰∏ãËΩΩÂπ∂ÂÆâË£ÖGo
    echo -e "${BLUE}‰∏ãËΩΩ Go ${GO_VERSION}...${NC}"
    cd /tmp
    wget -q "https://golang.org/dl/go${GO_VERSION}.linux-${GO_ARCH}.tar.gz"
    
    echo -e "${BLUE}ÂÆâË£Ö Go...${NC}"
    sudo rm -rf /usr/local/go
    sudo tar -C /usr/local -xzf "go${GO_VERSION}.linux-${GO_ARCH}.tar.gz"
    rm "go${GO_VERSION}.linux-${GO_ARCH}.tar.gz"
    
    # ËÆæÁΩÆÁéØÂ¢ÉÂèòÈáè
    if ! grep -q '/usr/local/go/bin' ~/.bashrc; then
        echo 'export PATH=$PATH:/usr/local/go/bin' >> ~/.bashrc
        echo 'export GOPATH=$HOME/go' >> ~/.bashrc
        echo 'export GOBIN=$GOPATH/bin' >> ~/.bashrc
    fi
    
    if ! grep -q '/usr/local/go/bin' /etc/profile; then
        echo 'export PATH=$PATH:/usr/local/go/bin' | sudo tee -a /etc/profile
    fi
    
    # ÂΩìÂâç‰ºöËØù‰∏≠ËÆæÁΩÆÁéØÂ¢ÉÂèòÈáè
    export PATH=$PATH:/usr/local/go/bin
    export GOPATH=$HOME/go
    export GOBIN=$GOPATH/bin
    
    # È™åËØÅÂÆâË£Ö
    go_version=$(/usr/local/go/bin/go version)
    echo -e "${GREEN}‚úì $go_version ÂÆâË£ÖÊàêÂäü${NC}"
}

# ÂÆâË£ÖÊï∞ÊçÆÂ∫ì
install_databases() {
    echo -e "${BLUE}üóÑÔ∏è  ÂÆâË£ÖÊï∞ÊçÆÂ∫ì...${NC}"
    
    # ËØ¢ÈóÆÊòØÂê¶ÂÆâË£ÖMySQL
    read -p "ÊòØÂê¶ÂÆâË£ÖMySQL? (y/n): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        echo -e "${BLUE}ÂÆâË£Ö MySQL...${NC}"
        case $DISTRO in
            ubuntu|debian)
                sudo apt update
                sudo apt install -y mysql-server mysql-client
                ;;
            centos|rhel)
                sudo yum install -y mysql-server mysql
                ;;
            fedora)
                sudo dnf install -y mysql-server mysql
                ;;
            arch)
                sudo pacman -S mysql --noconfirm
                ;;
        esac
        
        # ÂêØÂä®MySQLÊúçÂä°
        sudo systemctl start mysql || sudo systemctl start mysqld
        sudo systemctl enable mysql || sudo systemctl enable mysqld
        
        echo -e "${GREEN}‚úì MySQL ÂÆâË£ÖÂÆåÊàê${NC}"
        echo -e "${YELLOW}ËØ∑Á®çÂêéËøêË°å sudo mysql_secure_installation Êù•ÈÖçÁΩÆMySQLÂÆâÂÖ®ËÆæÁΩÆ${NC}"
    fi
    
    # ËØ¢ÈóÆÊòØÂê¶ÂÆâË£ÖMongoDB
    read -p "ÊòØÂê¶ÂÆâË£ÖMongoDB? (y/n): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        echo -e "${BLUE}ÂÆâË£Ö MongoDB...${NC}"
        case $DISTRO in
            ubuntu)
                wget -qO - https://www.mongodb.org/static/pgp/server-6.0.asc | sudo apt-key add -
                echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu $(lsb_release -cs)/mongodb-org/6.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-6.0.list
                sudo apt update
                sudo apt install -y mongodb-org
                ;;
            debian)
                wget -qO - https://www.mongodb.org/static/pgp/server-6.0.asc | sudo apt-key add -
                echo "deb http://repo.mongodb.org/apt/debian $(lsb_release -cs)/mongodb-org/6.0 main" | sudo tee /etc/apt/sources.list.d/mongodb-org-6.0.list
                sudo apt update
                sudo apt install -y mongodb-org
                ;;
            centos|rhel)
                cat > /tmp/mongodb-org-6.0.repo << 'EOF'
[mongodb-org-6.0]
name=MongoDB Repository
baseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/6.0/x86_64/
gpgcheck=1
enabled=1
gpgkey=https://www.mongodb.org/static/pgp/server-6.0.asc
EOF
                sudo mv /tmp/mongodb-org-6.0.repo /etc/yum.repos.d/
                sudo yum install -y mongodb-org
                ;;
            fedora)
                sudo dnf install -y mongodb-server
                ;;
            arch)
                sudo pacman -S mongodb --noconfirm
                ;;
        esac
        
        # ÂêØÂä®MongoDBÊúçÂä°
        sudo systemctl start mongod
        sudo systemctl enable mongod
        
        echo -e "${GREEN}‚úì MongoDB ÂÆâË£ÖÂÆåÊàê${NC}"
    fi
}

# ÈÖçÁΩÆÊï∞ÊçÆÂ∫ì
setup_databases() {
    echo -e "${BLUE}‚öôÔ∏è  ÈÖçÁΩÆÊï∞ÊçÆÂ∫ì...${NC}"
    
    # Ê£ÄÊü•MySQLÊòØÂê¶ËøêË°å
    if systemctl is-active --quiet mysql || systemctl is-active --quiet mysqld; then
        echo -e "${BLUE}ÈÖçÁΩÆMySQLÊï∞ÊçÆÂ∫ì...${NC}"
        read -p "ÊòØÂê¶ÂàõÂª∫È°πÁõÆÊï∞ÊçÆÂ∫ìÂíåÁî®Êà∑? (y/n): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            echo "ËØ∑ËæìÂÖ•MySQL rootÂØÜÁ†Å:"
            mysql -u root -p << 'EOF'
CREATE DATABASE IF NOT EXISTS vite_pluginend;
CREATE USER IF NOT EXISTS 'pluginend'@'localhost' IDENTIFIED BY 'pluginend123';
GRANT ALL PRIVILEGES ON vite_pluginend.* TO 'pluginend'@'localhost';
FLUSH PRIVILEGES;
SELECT 'MySQLÊï∞ÊçÆÂ∫ìÈÖçÁΩÆÂÆåÊàê' AS status;
EOF
            echo -e "${GREEN}‚úì MySQLÊï∞ÊçÆÂ∫ìÈÖçÁΩÆÂÆåÊàê${NC}"
        fi
    fi
    
    # Ê£ÄÊü•MongoDBÊòØÂê¶ËøêË°å
    if systemctl is-active --quiet mongod; then
        echo -e "${GREEN}‚úì MongoDB ËøêË°åÊ≠£Â∏∏ÔºåÊó†ÈúÄÈ¢ùÂ§ñÈÖçÁΩÆ${NC}"
    fi
}

# ÂÆâË£ÖÈ°πÁõÆ‰æùËµñÂπ∂ÊûÑÂª∫
build_project() {
    echo -e "${BLUE}üî® ÊûÑÂª∫È°πÁõÆ...${NC}"
    
    cd "$INSTALL_DIR"
    
    # ÂÆâË£ÖÂâçÁ´Ø‰æùËµñ
    echo -e "${BLUE}ÂÆâË£ÖÂâçÁ´Ø‰æùËµñ...${NC}"
    npm install
    
    # ÊûÑÂª∫ÂâçÁ´Ø
    echo -e "${BLUE}ÊûÑÂª∫ÂâçÁ´Ø...${NC}"
    npm run build
    
    # ÂÆâË£ÖÂêéÁ´Ø‰æùËµñ
    echo -e "${BLUE}ÂÆâË£ÖÂêéÁ´Ø‰æùËµñ...${NC}"
    cd backend
    go mod download
    
    # ÊûÑÂª∫ÂêéÁ´Ø
    echo -e "${BLUE}ÊûÑÂª∫ÂêéÁ´Ø...${NC}"
    go build -o ../vite-pluginend-server cmd/server/main.go
    cd ..
    
    echo -e "${GREEN}‚úÖ È°πÁõÆÊûÑÂª∫ÂÆåÊàê${NC}"
}

# ÂàõÂª∫Á≥ªÁªüÊúçÂä°
create_service() {
    echo -e "${BLUE}‚öôÔ∏è  ÂàõÂª∫Á≥ªÁªüÊúçÂä°...${NC}"
    
    read -p "ÊòØÂê¶ÂàõÂª∫systemdÊúçÂä°‰ª•Ëá™Âä®ÂêØÂä®? (y/n): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        return
    fi
    
    # ÂàõÂª∫ÁéØÂ¢ÉÈÖçÁΩÆÊñá‰ª∂
    sudo tee /etc/vite-pluginend.env > /dev/null << EOF
PORT=8081
GIN_MODE=release
MONGODB_URI=mongodb://localhost:27017
MONGODB_DB=vite_pluginend
UPLOAD_DIR=$INSTALL_DIR/uploads
EOF
    
    # ÂàõÂª∫systemdÊúçÂä°Êñá‰ª∂
    sudo tee /etc/systemd/system/vite-pluginend.service > /dev/null << EOF
[Unit]
Description=Vite Pluginend Server
After=network.target mongod.service mysql.service

[Service]
Type=simple
User=$USER
Group=$USER
WorkingDirectory=$INSTALL_DIR
ExecStart=$INSTALL_DIR/vite-pluginend-server
EnvironmentFile=/etc/vite-pluginend.env
Restart=always
RestartSec=5

[Install]
WantedBy=multi-user.target
EOF
    
    # ÈáçÊñ∞Âä†ËΩΩsystemdÂπ∂ÂêØÁî®ÊúçÂä°
    sudo systemctl daemon-reload
    sudo systemctl enable vite-pluginend
    
    echo -e "${GREEN}‚úÖ Á≥ªÁªüÊúçÂä°ÂàõÂª∫ÂÆåÊàê${NC}"
}

# ÂêØÂä®ÊúçÂä°
start_services() {
    echo -e "${BLUE}üöÄ ÂêØÂä®ÊúçÂä°...${NC}"
    
    # ÂêØÂä®Êï∞ÊçÆÂ∫ìÊúçÂä°
    echo -e "${BLUE}ÂêØÂä®Êï∞ÊçÆÂ∫ìÊúçÂä°...${NC}"
    if systemctl list-unit-files | grep -q mysql; then
        sudo systemctl start mysql
    elif systemctl list-unit-files | grep -q mysqld; then
        sudo systemctl start mysqld
    fi
    
    if systemctl list-unit-files | grep -q mongod; then
        sudo systemctl start mongod
    fi
    
    # ÂêØÂä®Â∫îÁî®ÊúçÂä°
    if systemctl list-unit-files | grep -q vite-pluginend; then
        echo -e "${BLUE}ÂêØÂä®Â∫îÁî®ÊúçÂä°...${NC}"
        sudo systemctl start vite-pluginend
        
        # Ê£ÄÊü•ÊúçÂä°Áä∂ÊÄÅ
        sleep 3
        if sudo systemctl is-active --quiet vite-pluginend; then
            echo -e "${GREEN}‚úÖ Â∫îÁî®ÊúçÂä°ÂêØÂä®ÊàêÂäü${NC}"
        else
            echo -e "${RED}‚ö† Â∫îÁî®ÊúçÂä°ÂêØÂä®Â§±Ë¥•ÔºåÊü•ÁúãÊó•Âøó:${NC}"
            sudo systemctl status vite-pluginend
        fi
    else
        echo -e "${BLUE}ÊâãÂä®ÂêØÂä®Â∫îÁî®...${NC}"
        cd "$INSTALL_DIR"
        nohup ./vite-pluginend-server > vite-pluginend.log 2>&1 &
        echo $! > vite-pluginend.pid
        echo -e "${GREEN}‚úÖ Â∫îÁî®Â∑≤Âú®ÂêéÂè∞ÂêØÂä®${NC}"
    fi
}

# ÊòæÁ§∫ÂÆâË£ÖÁªìÊûú
show_results() {
    echo -e "\n${GREEN}üéâ ÂÆâË£ÖÂÆåÊàêÔºÅ${NC}"
    echo -e "${CYAN}================================================${NC}"
    echo -e "${YELLOW}üìÅ È°πÁõÆÁõÆÂΩï: $INSTALL_DIR${NC}"
    echo -e "${YELLOW}üåê ÂâçÁ´ØËÆøÈóÆ: http://localhost:3000${NC}"
    echo -e "${YELLOW}üîß ÂêéÁ´ØAPI: http://localhost:8081${NC}"
    echo -e "${YELLOW}üì¶ Êèí‰ª∂ÁÆ°ÁêÜ: http://localhost:3000/app-market${NC}"
    echo -e "${CYAN}================================================${NC}"
    
    echo -e "\n${BLUE}üìã Â∏∏Áî®ÂëΩ‰ª§:${NC}"
    if systemctl list-unit-files | grep -q vite-pluginend; then
        echo -e "  ${YELLOW}Êü•ÁúãÊúçÂä°Áä∂ÊÄÅ:${NC} sudo systemctl status vite-pluginend"
        echo -e "  ${YELLOW}ÈáçÂêØÊúçÂä°:${NC} sudo systemctl restart vite-pluginend"
        echo -e "  ${YELLOW}Êü•ÁúãÊó•Âøó:${NC} sudo journalctl -u vite-pluginend -f"
        echo -e "  ${YELLOW}ÂÅúÊ≠¢ÊúçÂä°:${NC} sudo systemctl stop vite-pluginend"
    else
        echo -e "  ${YELLOW}Êü•ÁúãÊó•Âøó:${NC} tail -f $INSTALL_DIR/vite-pluginend.log"
        echo -e "  ${YELLOW}ÂÅúÊ≠¢ÊúçÂä°:${NC} kill \$(cat $INSTALL_DIR/vite-pluginend.pid)"
    fi
    
    echo -e "\n${BLUE}üîß ÈÖçÁΩÆÊñá‰ª∂:${NC}"
    echo -e "  ${YELLOW}ÁéØÂ¢ÉÈÖçÁΩÆ:${NC} /etc/vite-pluginend.env"
    echo -e "  ${YELLOW}È°πÁõÆÈÖçÁΩÆ:${NC} $INSTALL_DIR/backend/config/"
    
    echo -e "\n${GREEN}ÂÆâË£ÖÂÆåÊàêÔºÅËØ∑Âú®ÊµèËßàÂô®‰∏≠ËÆøÈóÆ‰∏äËø∞Âú∞ÂùÄÂºÄÂßã‰ΩøÁî®„ÄÇ${NC}"
}

# ‰∏ªÂÆâË£ÖÊµÅÁ®ã
main() {
    echo -e "${BLUE}üöÄ ÂºÄÂßãËá™Âä®ÂÆâË£ÖÊµÅÁ®ã...${NC}"
    
    # Ê£ÄÊü•ÊòØÂê¶‰ª•rootÊùÉÈôêËøêË°å
    if [[ $EUID -eq 0 ]]; then
        echo -e "${RED}‚ùå ËØ∑‰∏çË¶Å‰ª•rootÁî®Êà∑ËøêË°åÊ≠§ËÑöÊú¨${NC}"
        echo -e "${YELLOW}ËÑöÊú¨‰ºöÂú®ÈúÄË¶ÅÊó∂Ëá™Âä®ËØ∑Ê±ÇsudoÊùÉÈôê${NC}"
        exit 1
    fi
    
    # Ê£ÄÊµãÊìç‰ΩúÁ≥ªÁªü
    detect_os
    
    # ÂÆâË£ÖÂü∫Á°Ä‰æùËµñ
    install_basic_deps
    
    # ÂÖãÈöÜÈ°πÁõÆ
    clone_project
    
    # Ê£ÄÊü•Âπ∂ÂÆâË£Ö‰æùËµñ
    echo -e "\n${BLUE}üì¶ Ê£ÄÊü•ÂíåÂÆâË£ÖÁ≥ªÁªü‰æùËµñ...${NC}"
    
    if ! check_dependency "node"; then
        install_nodejs
    fi
    
    if ! check_dependency "go"; then
        install_go
    fi
    
    # ÂÆâË£ÖÊï∞ÊçÆÂ∫ì
    install_databases
    
    # ÈÖçÁΩÆÊï∞ÊçÆÂ∫ì
    setup_databases
    
    # ÊûÑÂª∫È°πÁõÆ
    build_project
    
    # ÂàõÂª∫ÊúçÂä°
    create_service
    
    # ÂêØÂä®ÊúçÂä°
    start_services
    
    # ÊòæÁ§∫ÁªìÊûú
    show_results
}

# ÊçïËé∑‰∏≠Êñ≠‰ø°Âè∑
trap 'echo -e "\n${RED}ÂÆâË£ÖË¢´‰∏≠Êñ≠${NC}"; exit 1' INT

# ËøêË°å‰∏ªÂáΩÊï∞
main "$@" 