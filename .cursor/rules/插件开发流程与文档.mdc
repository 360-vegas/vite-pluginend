---
description: 
globs: 
alwaysApply: false
---
# 插件开发流程与开发文档

本流程适用于本项目插件的全生命周期开发、审核、分发与维护。

## 1. 需求分析与设计
- 明确插件功能、目标用户、数据流和接口需求。
- 设计插件的接口、数据结构、配置项。
- 评估与主系统的集成点（如API、消息队列等）。

## 2. 开发环境准备
- Go 1.21+，推荐 VSCode/GoLand。
- 配置 Go Modules，依赖管理。
- 安装 golangci-lint、gofmt、Go Test 等工具。

## 3. 插件编码实现
- 遵循项目插件接口（Plugin interface），实现 Name、Version、Execute 等方法。
- 目录结构建议见 [插件开发规范.mdc](mdc:插件开发规范.mdc)。
- 配置、依赖、资源等全部通过主系统统一管理。

## 4. 单元测试与集成测试
- 编写单元测试，覆盖主要功能和异常分支。
- 集成测试插件与主系统的数据交互、接口调用。
- 性能测试，确保插件不会拖慢主系统。

## 5. 文档编写
- 每个插件必须有 README.md，内容包括功能说明、安装说明、配置说明、使用示例、注意事项等。
- 必须有 API 注释和关键逻辑注释。

## 6. 打包与提交
- 插件代码、配置、依赖等打包成 zip 压缩包。
- 包内必须包含 README.md、版本说明、变更日志等。
- 按照主系统要求命名压缩包（如 plugin-name-v1.0.0.zip）。

## 7. 后台审核
- 提交压缩包到后台管理系统，等待审核。
- 审核内容包括：功能、接口规范、安全性、依赖、文档等。

## 8. 审核通过后同步与分发
- 审核通过后，主系统自动同步插件到所有用户。
- 用户后台可下载安装、启用、禁用插件。

## 9. 安装与绑定
- 插件安装时需校验卡密、绑定账号/服务器（如 license、租户ID、机器码等）。
- 支持后台限制每个账号/租户的插件绑定数量。

## 10. 版本管理与升级
- 插件需声明支持的主系统版本范围。
- 插件升级需兼容旧数据，支持回滚。
- 插件卸载、禁用、升级等均有完整的生命周期管理。

> 详细接口、数据结构、流程请参考 [插件-卡密与绑定机制开发规范.md](mdc:docs/插件-卡密与绑定机制开发规范.md) 及 [Go-插件系统开发文档.md](mdc:docs/Go-插件系统开发文档.md)。

